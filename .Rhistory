is_dummy(c(0,1))
is_dummy(data.frame(x=c(1,2)))
is_dummy(data.frame(x=c(1,2,3)))
is_dummy(data.frame(x=c(0)))
is_dummy(data.frame(x=c(0,1)))
usethis::use_r("custom_scale.R")
View(scale)
View(scale.default())
View(scale.default)
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
# Display the test dataset
print(df)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
fit <- regmodel(y ~ . , data  = NULL)
fit <- regmodel(y ~ . , data  = NULL, model = "lasso")
fit <- regmodel(y ~ . , data  = NULL, model = "lasso", cv = T)
devtools::load_all()
fit <- regmodel(y ~ . , data  = NULL, model = "lasso", cv = T)
devtools::load_all()
fit <- regmodel(y ~ . , data  = NULL, model = "lasso", cv = T)
fit <- regmodel(y ~ . , data  = NULL, model = "lasso", cv = T)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
devtools::load_all()
devtools::load_all()
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
x_reg
beta
lambda
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
x_mean
x_sd
dim(testData)
testData
dim(X)
X[indexes]
X[indexes,]
X[Indexes,]
devtools::load_all()
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
devtools::load_all()
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
x_mean
dim(testData)
ncol(testData)
class(testData)
testData
x_sd
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T)
df
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
?regmodel
devtools::load_all()
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
devtools::load_all()
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
testData
trainData
Indexes
class(testData)
class(trainData)
dim(trainData)
dim(testData)
fols
folds
df
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
folds
m
devtools::load_all()
set.seed(123)  # For reproducibility
# Create a test dataset
df <- data.frame(
x1 = rnorm(10),            # Numeric variable with random normal values
x2 = rnorm(10, mean = 5),  # Another numeric variable with a different mean
x3 = sample(0:1, 10, replace = TRUE),  # Dummy variable (binary)
x4 = sample(0:1, 10, replace = TRUE),  # Another dummy variable
x5 = rep(3, 10),           # Single-value variable (constant)
x6 = rnorm(10)             # Another numeric variable
)
df$y <- 2 * df$x1 + 3 * df$x2 - 1.5 * df$x3 + df$x4 + rnorm(10, mean = 0, sd = 1)
# Display the test dataset
print(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 5)
m
folds
testData
c
c
fit
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 11)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 10)
Q
devtools::load_all()
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 10)
testData
dim(testData)
devtools::load_all()
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 10)
c
c
c
fit$min_lambda
fit$MSPE
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 10)
folds
var(df)
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 10)
testData
trainData
ytestData
ytrainData
x_reg
fit <- regmodel(y ~ . , data  = df, model = "lasso", cv = T, m = 9)
fit$MSPE
plot(MSPE)
plot(fit$MSPE)
plot(fit$lambda, fit$MSPE)
plot(log(fit$lambda), fit$MSPE)
fit$min_lambda
View(ridge_cv)
beta <- c(1, 2 , NaN)
beta
all(!is.nan(beta))
is.nan(beta)
stopifnot("couldn't calculate coefficients. Data is probably poor conditioned"
= all(!is.nan(beta)))
stopifnot("couldn't calculate coefficients. Data is probably poor conditioned"
= !is.nan(beta))
!is.nan(beta)
View(lasso_c)
View(lasso_cv)
View(lasso)
View(ridge)
set.seed(123)  # For reproducibility
# Parameters
n <- 100  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector for a subset of predictors
beta_true <- rnorm(p)
# Introduce sparsity: zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
# Noise is added to simulate real-world data
y <- X %*% beta_true + rnorm(n)
# Convert to data frame for easier handling
df <- data.frame(X)
df$y <- y
# Display the dimensions of the dataset
cat("Dimensions of the dataset: \n")
cat("Number of observations:", n, "\n")
cat("Number of predictors:", p, "\n")
cat("Dimensions of the data frame:", dim(df), "\n")
# Show the first few rows of the dataset
head(df)
X
dim(X)
rm(list = ls())
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 100  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector for a subset of predictors
beta_true <- rnorm(p)
# Introduce sparsity: zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
# Noise is added to simulate real-world data
y <- X %*% beta_true + rnorm(n)
# Convert to data frame for easier handling
df <- data.frame(X)
df$y <- y
df
names(df)
dim(df)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5)
df
# Parameters
n <- 200  # Number of observations
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Convert to data frame
df <- data.frame(X)
df$y <- y
dim(df)
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 200  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
dim(df)
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(training_set)
dim(test_set)
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 200  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5)
min_lambda <- lassoCV$min_lambda
devtools::load_all()
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5)
min_lambda <- lassoCV$min_lambda
print(ridgeCV)
print(lassoCV)
min_lambda
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 50)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10)
min_lambda <- lassoCV$min_lambda
print(lassoCV)
min_lambda <- lassoCV$min_lambda
print(lassoCV)
min_lambda
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
lasso_fit$R2
beta_true
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 800  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "ridge",
lambda = min_lambda)
print(lasso_fit)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "ridge",
lambda = 0)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "ridge",
lambda = 0.1)
print(lasso_fit$R2)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = 0.1)
# Parameters
n <- 400  # Number of observations
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 400  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = 0.1)
lasso_fit
