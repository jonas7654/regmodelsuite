usethis::use_r("least_angle_regression")
devtools::check()
devtools::document()
cov(1:5,5:1)
cov(matrix(c(2,2,2,2,2,2,2,2)))
cov(matrix(c(2,2,2,2,2,2,2,2)),2,4)
cov(matrix(c(2,2,2,2,2,2,2,2)),4,2)
cov(matrix(c(2,2,2,2,2,2,2,2),2,2)
)
outer(1:5)
outer(1:5,1:5)
cov(outer(1:5,1:5))
cov2cor(cov(outer(1:5,1:5)))
cov(outer(1:5,1:5))
cov(outer(1:5,1:5)) |> cov2cor()
test <- matrix(2,3,2,5)
test
test
cor(1:3,test)
cor(1:3,matrix(c(1,4,2,5,7,4),3,2))
matrix(c(1,4,2,5,7,4),3,2)
cor(1:3,matrix(c(1,4,2,5,7,1000),3,2))
cov(1:3,matrix(c(1,4,2,5,7,1000),3,2))
?cov
least_angle_regression <- function(X, y) {
# init values
beta <- rep(0, ncol(X))
r <- y - mean(y) # since beta_i = 0
# standardize regressors
X_scaled <- scale(X)
for (i in 1:1000) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
max_cor <- max(r_x_cor)
delta_step = .Internal(solve((t(X_scaled)) %*% X_scaled, t(X_scaled) %*% r))
}
return(delta_step)
}
devtools::load_all()
testdata <- mpg
library(tidyverse)
testdata <- mpg
mpg
X <- model.matrix(displ ~ cyl + drv , data = testdata)
X
y <- model.response(model.frame(displ ~ cyl + drv, data = testdata))
least_angle_regression(X,y)
least_angle_regression <- function(X, y) {
# init values
beta <- rep(0, ncol(X))
r <- y - mean(y) # since beta_i = 0
# standardize regressors
X_scaled <- scale(X)
for (i in 1:1000) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
max_cor <- max(r_x_cor)
delta_step = .Internal(La_solve((t(X_scaled)) %*% X_scaled, t(X_scaled) %*% r))
}
return(delta_step)
}
least_angle_regression(X,y)
least_angle_regression <- function(X, y) {
# init values
beta <- rep(0, ncol(X))
r <- y - mean(y) # since beta_i = 0
# standardize regressors
X_scaled <- scale(X)
for (i in 1:1000) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
max_cor <- max(r_x_cor)
delta_step = .Internal(La_solve((t(X_scaled)) %*% X_scaled, t(X_scaled) %*% r), tol = .Machine$double.eps)
}
return(delta_step)
}
least_angle_regression(X,y)
least_angle_regression <- function(X, y) {
# init values
beta <- rep(0, ncol(X))
r <- y - mean(y) # since beta_i = 0
# standardize regressors
X_scaled <- scale(X)
for (i in 1:1000) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
max_cor <- max(r_x_cor)
delta_step = .Internal(La_solve((t(X_scaled)) %*% X_scaled, t(X_scaled) %*% r), tol = .Machine$double.eps)
}
return(delta_step)
}
least_angle_regression(X,y)
least_angle_regression <- function(X, y) {
# init values
beta <- rep(0, ncol(X))
r <- y - mean(y) # since beta_i = 0
# standardize regressors
X_scaled <- scale(X)
for (i in 1:1000) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
max_cor <- max(r_x_cor)
delta_step = .Internal(La_solve((t(X_scaled)) %*% X_scaled, t(X_scaled) %*% r , tol = .Machine$double.eps))
}
return(delta_step)
}
least_angle_regression(X,y)
?match.call
?match.arg
updateR
?setdiff
least_angle_regression <- function(X, y, iter = 1000) {
# standardize regressors
X_scaled <- scale(X)
n <- nrow(X)
p <- ncol(X)
# Initialize values
beta <- rep(0, p)
r <- y - mean(y)  # residua
active_set <- logical(p)
x_candidates <- 1:p
for (i in 1:iter) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
# Get index of x_i which has the highest correlation
x_index <- which.max(abs(r_x_cor))
# Update the active set
active_set[x_index] <- TRUE
x_candidates <- setdiff(x_candidates, x_index)
A <- X[, active_set]
# Calculate delta and u
delta = .Internal(La_solve((t(A)) %*% A, t(A) %*% r , tol = .Machine$double.eps))
u <- A %*% delta
# Move betas
beta[x_index] <- beta[x_index] + alpha * delta_step
# TODO
# TODO
# update residual
r <- y - X_scaled %*% beta
}
return (list(delta, beta, u , r))
}
least_angle_regression(X,y,1)
# Move betas
beta[x_index] <- beta[x_index] + alpha * delta
least_angle_regression <- function(X, y, iter = 1000) {
# standardize regressors
X_scaled <- scale(X)
n <- nrow(X)
p <- ncol(X)
# Initialize values
beta <- rep(0, p)
r <- y - mean(y)  # residua
active_set <- logical(p)
x_candidates <- 1:p
for (i in 1:iter) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
# Get index of x_i which has the highest correlation
x_index <- which.max(abs(r_x_cor))
# Update the active set
active_set[x_index] <- TRUE
x_candidates <- setdiff(x_candidates, x_index)
A <- X[, active_set]
# Calculate delta and u
delta = .Internal(La_solve((t(A)) %*% A, t(A) %*% r , tol = .Machine$double.eps))
u <- A %*% delta
# Move betas
beta[x_index] <- beta[x_index] + alpha * delta
# TODO
# TODO
# update residual
r <- y - X_scaled %*% beta
}
return (list(delta, beta, u , r))
}
least_angle_regression(X,y,1)
alpha = 0.5
least_angle_regression(X,y,1)
least_angle_regression(X,y, iter = 1)
least_angle_regression(X,y, iter = 10)
least_angle_regression(X,y)
least_angle_regression <- function(X, y, iter = 1000) {
# standardize regressors
X_scaled <- scale(X)
n <- nrow(X)
p <- ncol(X)
# Initialize values
beta <- rep(0, p)
r <- y - mean(y)  # residua
active_set <- logical(p)
x_candidates <- 1:p
for (i in 1:iter) {
# calculate the correlation between r and x_j
r_x_cor <- cor(r, X_scaled)
# Get index of x_i which has the highest correlation
x_index <- which.max(abs(r_x_cor))
# Update the active set
active_set[x_index] <- TRUE
x_candidates <- setdiff(x_candidates, x_index)
A <- X[, active_set]
# Calculate delta and u
delta = solve(t(A) %*% A, t(A) %*% r)
u <- A %*% delta
# Move betas
beta[x_index] <- beta[x_index] + alpha * delta
# TODO
# TODO
# update residual
r <- y - X_scaled %*% beta
}
return (list(delta, beta, u , r))
}
testdata <- mpg
X <- model.matrix(displ ~ cyl + drv , data = testdata)
y <- model.response(model.frame(displ ~ cyl + drv, data = testdata))
least_angle_regression(X,y)
update
update.default
View(update.default)
?match.call
formula(y ~ x1
)
update(formula(y ~ x1) , + 0)
update(formula(y ~ x1) , . ~ 0 + .)
update(formula(y ~ x1) , . ~ + 0)
update(formula(y ~ x1) , . ~ + 0 .)
update(formula(y ~ x1) ,   + 0 .)
update(formula(y ~ x1) , .  + 0 .)
