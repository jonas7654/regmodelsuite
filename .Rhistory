# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
# Test predict
# back to original scale
manual_predict <- as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
manual_predict
rm(list = ls())
devtools::test_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
lm
devtools::test_active_file("tests/testthat/test-LAR_test.R")
n <- 50
p <- 60
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
fit$coefficients
nrow(fit$coefficients)
nrow(fit$coefficients)[fit$coefficients]
nrow(fit$coefficients)[nrow(fit$coefficients) ,]
nrow(fit$coefficients)[nrow(fit$coefficients) - 1 ,]
nrow(fit$coefficients)[49,]
nrow(fit$coefficients)[29,]
nrow(fit$coefficients)
fit$coefficients[nrow(fit$coefficients) , ]
coef(fit)
coef(fit) == fit$coefficients[n - 1 , ]
coef(fit) == fit$coefficients[n - 1 , ]
devtools::test_active_file("tests/testthat/test-LAR_test.R")
predict(fit)
predict(fit)
devtools::load_all()
predict(fit)
predict(fit)
devtools::load_all()
predict(fit)
y_hat
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
# Test predict
# back to original scale
manual_predict <- as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
manual_predict
coef_test_LAR
scale(X)
mean(y)
as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
predict(LAR_fit
)
devtools::test_active_file("tests/testthat/test-lasso_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
coef(LAR_fit)
devtools::test_active_file("tests/testthat/test-LAR_test.R")
coef(fit)
coef(fit)
coef(fit)
fit$coefficients
coef(fit) == fit$coefficients[nrow(fit$coefficients)]
rm(list = ls())
devtools::test_active_file("tests/testthat/test-LAR_test.R")
n <- 50
p <- 5
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
fit$coefficients
fit$coefficients[nrow(fit$coefficients) , ]
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
coef_test_LAR
all(coef_test_LAR == LAR_fit$coefficients)
all(coef_test_LAR == LAR_fit$coefficients[nrow(LAR_fit$coefficients)])
all(coef_test_LAR == LAR_fit$coefficients[nrow(LAR_fit$coefficients) , ])
mean(y)
object <- LAR_fit
stopifnot("please provide a LAR object"  = inherits(object , "LAR"))
beta <- object$coefficients[nrow(object$coefficients) , ]
mean_y <- object$mean_y
means_X <- object$mean_x  # Mean of training data used for standardization
sds_X <- object$sd_x      # Standard deviation of training data used for standardization
beta
coef_test_LAR
mean(y)
mean_y
means_X
colMeans(X)
colMeans(X) == mean_x
colMeans(X) == means_x
colMeans(X) == means_X
apply(X , 2 , function(x) {sd(x)})
apply(X , 2 , function(x) {sd(x)}) == sds_X
all(apply(X , 2 , function(x) {sd(x)}) == sds_X)
scale(X)
attr(scale(X), "scaled:scale")
sds_X
attr(scale(X), "scaled:scale")
all(attr(scale(X), "scaled:scale") == sds_X)
all(attr(scale(X), "scaled:scale") == sds_X)
clear
rm(list = ls())
devtools::test_active_file("tests/testthat/test-lasso_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-lasso_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
set.seed(2421)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
apply(X, 2 ,function(x) {sd(x)})
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
LAR_fit$sd_x
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
coef_test_LAR
manual_predict
beta
X
dim(X)
y_hat
dim(y_hat)
set.seed(2421)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
set.seed(2421)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
LAR_fit$model
X
all(X == LAR_fit$model)
all(colMeans(X) == LAR_fit$model)
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::load_all()
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
plot(fit.LARS)
plot(fit_LARS)
plot(LAR_fit)
browseVignettes()
browseVignettes("regmodelsuite")
browseVignettes("regmodelsuite")
devtools::install()
devtools::install(build_vignettes = T)
browseVignettes("regmodelsuite")
devtools::document()
devtools::check()
devtools::test()
devtools::load_all()
devtools::test()
?pmax
library(Ecdat)
install.packages("Ecdat")
library(Ecdat)
df <- Ecdat::Caschool
cor(df)
df
names(df)
devtools::test()
devtools::test()
df <- mtcars
cor(df)
fit <- regmodel(mpg ~ as.factor(cyl) + disp + hp + I(hp^2) , data = mtcars, model = "ridge", lambda = 0.01)
fit$model
model.matrix(mpg ~ as.factor(cyl), data = df)
model.matrix(mpg ~ as.factor(cyl) + 0, data = df)
df <- mtcars
cor(df)
fit <- regmodel(mpg ~ as.factor(cyl) , data = mtcars, model = "ridge", lambda = 0)
fit$model
fit <- regmodel(mpg ~ as.factor(cyl) , data = mtcars, model = "ridge", lambda = 0)
ridge_plot(fit)
model.matrix(mpg ~ as.factor(cyl) + 0, data = df)
rowSums(model.matrix(mpg ~ as.factor(cyl) + 0, data = df))
model.matrix(mpg ~ as.factor(cyl), data = df)
model.matrix(mpg ~ as.factor(cyl) + 0, data = df)
fit <- regmodel(mpg ~ as.factor(cyl) , data = mtcars, model = "ridge", lambda = 0.5)
fit$model
usethis::use_r("predict.stepwise_selection.R")
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward")
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 1)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 2)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 3)
fit1 <- regmodel(mpg ~cyl , data = mtcars , model = "forward", n_predictors = 3)
fit1
fit <- regmodel(y ~ ., data = df, model = "ridge", lambda = 0, verbose = F)
fit1 <- regmodel(mpg ~cyl , data = mtcars , model = "forward", n_predictors = 3, verbose = F)
fit1
fit1$predictors
fit1$model
fit1$model[1]
fit1$model[2]
fit1$model$coefficients
coef(fit1)
coef(fit1$model)
predict(fit1$model)
df <- mtcars
cor(df)
fit1 <- regmodel(mpg ~cyl , data = mtcars , model = "forward", n_predictors = 3, verbose = F)
fit1$model
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 3, verbose = F)
df <- mtcars
cor(df)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 3, verbose = F)
fit1
df <- mtcars
cor(df)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 3, verbose = F)
rm(list =ls())
df <- mtcars
cor(df)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 3, verbose = F)
fit1
df <- mtcars
cor(df)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = mtcars , model = "forward", n_predictors = 1, verbose = F)
df <- mtcars
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = df , model = "forward", n_predictors = 1, verbose = F)
devtools::loaded_packages()
devtools::load_all()
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F)
fit1
predict(fit1)
class(fit1)
predict.stepwise_selection(fit1)
?inherits
devtools::load_all()
predict.stepwise_selection(fit1)
lmfit <- lm(mpg ~ cyl, data = mtcars)
predict(lmfit)
all(predict(lmfit) == predict.stepwise_selection(fit1))
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F,model_fct = "ridge")
fit1
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = ridge)
model_fct
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = lm)
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = lasso
)
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = lm)
fit1
fit1 <- regmodel(mpg ~ cyl , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = ridge)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = ridge)
fit1
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = ridge)
fit1
devtools::load_all()
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = ridge)
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = df , model = "forward", n_predictors = 1, verbose = F, model_fct = lm)
fit1
lm(mpg ~ as.factor(cyl), data = mtcars)
fit1$model$coefficients
fit1 <- regmodel(mpg ~ as.factor(cyl) , data = df , model = "forward", n_predictors = 2, verbose = F, model_fct = lm)
fit1
class(fit1)
predict.stepwise_selection(fit1)
lmfit <- lm(mpg ~ cyl, data = mtcars)
all(predict(lmfit) == predict.stepwise_selection(fit1))
lm(mpg ~ as.factor(cyl), data = mtcars)
fit1$model$coefficients
?as.factor
factor(cyl)
lm(mpg ~ factor(cyl), data = mtcars)
fit1$model$coefficients
lm(mpg ~ factor(cyl, exclude = 4), data = mtcars)
lm(mpg ~ factor(cyl, levels = c(4,6,8)), data = mtcars)
fit1$model$coefficients
lm(mpg ~ factor(cyl, levels = c(8,6,4)), data = mtcars)
fit1$model$coefficients
regmodel(formula, data, "forward", n_predictors=3, model_fct=\(formula, data) regmodel(forumla, data, "ridge", lambda=1))
lm(mpg ~ factor(cyl, levels = c(8,6,4)), data = mtcars)
fit1$model$coefficients
mtcars
regmodel_fit_forward <- regmodel(y ~ as.factor(category),
data = mydata,
model = "forward",
n_predictors = 2)
usethis::use_r("coef.stepwise_selection.R")
lm(mpg ~ cyl, data = mtcars)
lm(mpg ~ cyl, data = mtcars)$coefficients
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
anyNA(fit1, recursive = T)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
fit1$model$model
fit1$model$coefficients
lmfit$coefficients
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
coef(regmodel_fit_backward)
coef(regmodel_fit_forward)
coef(lm_fit)
mydata <- data.frame(
y = rnorm(100, mean = 50, sd = 10),              # Numeric response variable
category = factor(sample(c("A", "B", "C"), 100, replace = TRUE))  # Categorical predictor
)
fit1
fit1$model$coefficients
devtools::load_all()
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
lm_fit
regmodel_fit_forward
regmodel_fit_forward$model$call
regmodel_fit_forward$model$coefficients
lm_fit
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
lm_fit$call
lm_fit$coefficients
regmodel_fit_backward
regmodel_fit_backward$model
regmodel_fit_forward
regmodel_fit_forward$model
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
coef(fit1)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
coef_forward
coef_lm
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
coef(regmodel_fit_backward)
coef(regmodel_fit_forward)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
stepwise_ridge
stepwise_ridge$model
stepwise_ridge$model$coefficients
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
mtcars["mpg"]
names(forward_ridge_pred)
names(mtcars["mpg"])
rownames(mtcars["mpg"])
as.vector(mtcars["mpg"])
colnames(as.vector(mtcars["mpg"]))
rownames(as.vector(mtcars["mpg"]))
fit1$model$model
devtools::load_all()
fit <- regmodel(mpg ~ cyl , data = mtcars, model = "ridge", lambda = 0)
devtools::load_all()
fit <- regmodel(mpg ~ cyl , data = mtcars, model = "ridge", lambda = 0)
fit
predict(fit)
test <- fit$y
test
names(test) <- NULL
test
devtools::load_all()
fit <- regmodel(mpg ~ cyl , data = mtcars, model = "ridge", lambda = 0);names(predict(fit))
fit <- regmodel(mpg ~ cyl , data = mtcars, model = "ridge", lambda = 0.5);names(predict(fit))
fit <- regmodel(mpg ~ cyl , data = mtcars, model = "lasso", lambda = 0.5);names(predict(fit))
fit <- regmodel(mpg ~ cyl , data = mtcars, model = "LAR", lambda = 0.5);names(predict(fit))
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
predict(fit)
names(forward_ridge_pred)
names(predict(fit))
class(names(predict(fit)))
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
n
n
n
n
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
forward_ridge_pred
names(names(predict(fit)))
names(forward_ridge_pred)
class(names(forward_ridge_pred))
type(names(forward_ridge_pred))
typeof(names(forward_ridge_pred))
class(forward_pred)
class(names(forward_pred))
typeof(names(forward_pred))
attributes(forward_pred)
attributes(forward_ridge_pred)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
attributes(predict(stepwise_ridge))
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
# new data
new_dat <- as.data.frame(model.matrix(formula, data = mtcars))
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
dim(new_dat)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
n
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
stepwise_ridge$model
stepwise_ridge$model$model
dim(  expect_equal(forward_pred, forward_ridge_pred)
)
dim(  expect_equal(forward_pred, forward_ridge_pred))
dim(stepwise_ridge$model$model)
dim(new_dat)
formula
model.matrix(formula, mtcars)
stepwise_ridge
stepwise_ridge$predictors
formula
formula
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
new_dat
dim(new_dat)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
dim(new_dat)
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
new_dat
forward_ridge_pred_new
coef(stepwise_ridge)
as.matrix(new_dat)
colnames(new_dat)
new_dat
stepwise_ridge
stepwise_ridge$model$coefficients
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
names(new_dat)
coef(stepwise_ridge)
names(new_dat)
names(coef(stepwise_ridge))
names(coef(stepwise_ridge)) == names(new_dat)
names(coef(stepwise_ridge)) == names(new_dat[, c(2,1)])
names(new_dat[, c(2,1)])
devtools::load_all()
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
n
n
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-stepwise_selection_test.R")
forward_ridge_pred_new
forward_ridge_pred
