data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
n <- 100
p <- 101
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
devtools::load_all()
n <- 100
p <- 101
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
w
sqrt_w
sqrt_w
alpha_neg
alpha_pos
alpha
beta[active_variables]
n <- 10
p <- 15
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
n <- 5
p <- 6
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
beta
w
alpha
alpha
w
beta
r
alpha
w
beta
w
beta
beta
w
fit
fit$coefficients
n <- 10
p <- 11
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
fit
n <- 10
p <- 11
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
beta
beta
beta
alpha
w
w
a,lha
alpha
alpha
n <- 10
p <- 11
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
fit
rm(list = ls())
n <- 10
p <- 11
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
dim(X)
X
y
n <- 10
p <- 11
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
n <- 10
p <- 9
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
coef(fit)
n <- 1000
p <- 9
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
#
A_tilde <- A * sign(C_j[active_variables , ])
A_tilde_A_inverse <- solve(t(A_tilde) %*% A_tilde)
fit$coefficients
coef(fit)
n <- 50
p <- 60
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
coef(fit)
n <- 50
p <- 60
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
C_j
alpha
beta
true_beta
beta
beta
alpha
delta_step
alpha_neg
alpha_pos
devtools::load_all()
n <- 50
p <- 60
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
coef(fit)
dim(coef(fit))
View(coef.ridge)
devtools::test_coverage_active_file()
devtools::test_coverage_active_file()
?devtools::test_coverage_active_file()
?devtools::test_coverage()
devtools::test_coverage()
?devtools::test_coverage_active_file(coef.lasso)
devtools::test_coverage_active_file(coef.lasso)
devtools::test_coverage_active_file(file = "R/lasso.R")
devtools::test_coverage_active_file(file = "tests/testthat/test-lasso_test.R")
find_active_file()
devtools::test()
devtools::load_all()
devtools::test()
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
scale(X)
coef_test_LAR
devtools::load_all()
predict(fit)
fit$coefficients
fit$coefficients[nrow(fit$coefficients) , ]
as.vector(fit$coefficients[nrow(fit$coefficients) , ])
devtools::load_all()
n <- 50
p <- 60
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
lasso_fit <- regmodel(formula, data, model = "lasso", lambda = 0.02, cv = F)
# test coef
coef_test_lasso <- coef(lasso_fit)
# back to original scale
manual_predict <- as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_lasso)
manual_predict
min(y)
ma(y)
max(y)
max(predict(lasso_fit))
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
# Test predict
# back to original scale
manual_predict <- as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
manual_predict
rm(list = ls())
devtools::test_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
lm
devtools::test_active_file("tests/testthat/test-LAR_test.R")
n <- 50
p <- 60
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
fit$coefficients
nrow(fit$coefficients)
nrow(fit$coefficients)[fit$coefficients]
nrow(fit$coefficients)[nrow(fit$coefficients) ,]
nrow(fit$coefficients)[nrow(fit$coefficients) - 1 ,]
nrow(fit$coefficients)[49,]
nrow(fit$coefficients)[29,]
nrow(fit$coefficients)
fit$coefficients[nrow(fit$coefficients) , ]
coef(fit)
coef(fit) == fit$coefficients[n - 1 , ]
coef(fit) == fit$coefficients[n - 1 , ]
devtools::test_active_file("tests/testthat/test-LAR_test.R")
predict(fit)
predict(fit)
devtools::load_all()
predict(fit)
predict(fit)
devtools::load_all()
predict(fit)
y_hat
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
# Test predict
# back to original scale
manual_predict <- as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
manual_predict
coef_test_LAR
scale(X)
mean(y)
as.vector(mean(y) + as.matrix(scale(X)) %*% coef_test_LAR)
predict(LAR_fit
)
devtools::test_active_file("tests/testthat/test-lasso_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
coef(LAR_fit)
devtools::test_active_file("tests/testthat/test-LAR_test.R")
coef(fit)
coef(fit)
coef(fit)
fit$coefficients
coef(fit) == fit$coefficients[nrow(fit$coefficients)]
rm(list = ls())
devtools::test_active_file("tests/testthat/test-LAR_test.R")
n <- 50
p <- 5
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
fit <- regmodel(formula, data = data, model = "LAR")
fit$coefficients
coef(fit)
fit$coefficients
fit$coefficients[nrow(fit$coefficients) , ]
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
# test coef
coef_test_LAR <- coef(LAR_fit)
coef_test_LAR
all(coef_test_LAR == LAR_fit$coefficients)
all(coef_test_LAR == LAR_fit$coefficients[nrow(LAR_fit$coefficients)])
all(coef_test_LAR == LAR_fit$coefficients[nrow(LAR_fit$coefficients) , ])
mean(y)
object <- LAR_fit
stopifnot("please provide a LAR object"  = inherits(object , "LAR"))
beta <- object$coefficients[nrow(object$coefficients) , ]
mean_y <- object$mean_y
means_X <- object$mean_x  # Mean of training data used for standardization
sds_X <- object$sd_x      # Standard deviation of training data used for standardization
beta
coef_test_LAR
mean(y)
mean_y
means_X
colMeans(X)
colMeans(X) == mean_x
colMeans(X) == means_x
colMeans(X) == means_X
apply(X , 2 , function(x) {sd(x)})
apply(X , 2 , function(x) {sd(x)}) == sds_X
all(apply(X , 2 , function(x) {sd(x)}) == sds_X)
scale(X)
attr(scale(X), "scaled:scale")
sds_X
attr(scale(X), "scaled:scale")
all(attr(scale(X), "scaled:scale") == sds_X)
all(attr(scale(X), "scaled:scale") == sds_X)
clear
rm(list = ls())
devtools::test_active_file("tests/testthat/test-lasso_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-lasso_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
set.seed(2421)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
apply(X, 2 ,function(x) {sd(x)})
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
LAR_fit$sd_x
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
coef_test_LAR
manual_predict
beta
X
dim(X)
y_hat
dim(y_hat)
set.seed(2421)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
set.seed(2421)
n <- 25
p <- 50
true_beta <- rnorm(p, mean = 10, sd = 2)
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- X %*% true_beta + rnorm(n)
data <- data.frame(y, X)
formula <- as.formula(y ~ .)
# Test with p > n
LAR_fit <- regmodel(formula, data, model = "LAR", lambda = 1, cv = F)
LAR_fit$model
X
all(X == LAR_fit$model)
all(colMeans(X) == LAR_fit$model)
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::load_all()
devtools::load_all()
devtools::test_active_file("tests/testthat/test-LAR_test.R")
devtools::test_active_file("tests/testthat/test-LAR_test.R")
plot(fit.LARS)
plot(fit_LARS)
plot(LAR_fit)
browseVignettes()
browseVignettes("regmodelsuite")
browseVignettes("regmodelsuite")
devtools::install()
devtools::install(build_vignettes = T)
browseVignettes("regmodelsuite")
devtools::document()
devtools::check()
devtools::test()
devtools::load_all()
devtools::test()
?pmax
