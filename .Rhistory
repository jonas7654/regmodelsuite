coefficient_matrix[i, ] <- beta
# Calculate arc length
arg_length <- sapply(coefficient_matrix, function(x) {cumsum(abs(x))})
}
output_list <- list(coefficients = coefficient_matrix,
l1_arc_length = arg_length)
class(output_list) <- "LAR"
return (output_list)
}
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
theme_minimal()
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
#' Calculate the LARS path
#'
#' @param X data frame containing the covariates
#' @param Y response vector
#'
#' @return list ..... TODO
### TODO ####
# Verbose option
# plot(...) for plotting L1-arc length
# step output
# Lasso option
least_angle_regression <- function(X, y, iter = 10, verbose = FALSE) {
n <- nrow(X)
p <- ncol(X)
coefficient_matrix <- matrix(NA, iter, p)
# Standardize regressors and initialize the first residuum
X_scaled <- scale(X)
r <- y - mean(y)
# Helper
active_variables <- logical(p)
beta <- double(p)
for (i in 1:iter) {
# Find the regressor x most correlated with current r
r_cor <- cor(X_scaled[, !active_variables], r)
x_index <- which.max(abs(r_cor))
# update the active set
active_variables[x_index] <- TRUE
A <- X_scaled[, active_variables]
# Calculate the current model and update beta
delta_step <- solve(t(A) %*% A, t(A) %*% r) # .Internal(La_solve(t(A) %*% A, t(A) %*% r, .Machine$double.eps))
beta[active_variables] <- beta[active_variables] + delta_step
# update the residual
r <- y - A %*% as.matrix(beta[active_variables])
# Verbose option : TODO
if(verbose) {
active_set_verbose <- as.array(active_variables)
dimnames(active_set_verbose) <- colnames(X)[active_variables]
}
# update output data
coefficient_matrix[i, ] <- beta
}
# Calculate arc length
arg_length <- sapply(coefficient_matrix, function(x) {cumsum(abs(x))})
output_list <- list(coefficients = coefficient_matrix,
l1_arc_length = arg_length)
class(output_list) <- "LAR"
return (output_list)
}
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
result$l1_arc_length
#' Calculate the LARS path
#'
#' @param X data frame containing the covariates
#' @param Y response vector
#'
#' @return list ..... TODO
### TODO ####
# Verbose option
# plot(...) for plotting L1-arc length
# step output
# Lasso option
least_angle_regression <- function(X, y, iter = 10, verbose = FALSE) {
n <- nrow(X)
p <- ncol(X)
coefficient_matrix <- matrix(NA, iter, p)
# Standardize regressors and initialize the first residuum
X_scaled <- scale(X)
r <- y - mean(y)
# Helper
active_variables <- logical(p)
beta <- double(p)
for (i in 1:iter) {
# Find the regressor x most correlated with current r
r_cor <- cor(X_scaled[, !active_variables], r)
x_index <- which.max(abs(r_cor))
# update the active set
active_variables[x_index] <- TRUE
A <- X_scaled[, active_variables]
# Calculate the current model and update beta
delta_step <- solve(t(A) %*% A, t(A) %*% r) # .Internal(La_solve(t(A) %*% A, t(A) %*% r, .Machine$double.eps))
beta[active_variables] <- beta[active_variables] + delta_step
# update the residual
r <- y - A %*% as.matrix(beta[active_variables])
# Verbose option : TODO
if(verbose) {
active_set_verbose <- as.array(active_variables)
dimnames(active_set_verbose) <- colnames(X)[active_variables]
}
# update output data
coefficient_matrix[i, ] <- beta
}
# Calculate arc length
arg_length <- apply(coefficient_matrix, 1, function(x) {cumsum(abs(x))})
output_list <- list(coefficients = coefficient_matrix,
l1_arc_length = arg_length)
class(output_list) <- "LAR"
return (output_list)
}
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
coef_df
iterations
cumsum
cumsum(1:5)
sum(1:5)
#' Calculate the LARS path
#'
#' @param X data frame containing the covariates
#' @param Y response vector
#'
#' @return list ..... TODO
### TODO ####
# Verbose option
# plot(...) for plotting L1-arc length
# step output
# Lasso option
least_angle_regression <- function(X, y, iter = 10, verbose = FALSE) {
n <- nrow(X)
p <- ncol(X)
coefficient_matrix <- matrix(NA, iter, p)
# Standardize regressors and initialize the first residuum
X_scaled <- scale(X)
r <- y - mean(y)
# Helper
active_variables <- logical(p)
beta <- double(p)
for (i in 1:iter) {
# Find the regressor x most correlated with current r
r_cor <- cor(X_scaled[, !active_variables], r)
x_index <- which.max(abs(r_cor))
# update the active set
active_variables[x_index] <- TRUE
A <- X_scaled[, active_variables]
# Calculate the current model and update beta
delta_step <- solve(t(A) %*% A, t(A) %*% r) # .Internal(La_solve(t(A) %*% A, t(A) %*% r, .Machine$double.eps))
beta[active_variables] <- beta[active_variables] + delta_step
# update the residual
r <- y - A %*% as.matrix(beta[active_variables])
# Verbose option : TODO
if(verbose) {
active_set_verbose <- as.array(active_variables)
dimnames(active_set_verbose) <- colnames(X)[active_variables]
}
# update output data
coefficient_matrix[i, ] <- beta
}
# Calculate arc length
arg_length <- apply(coefficient_matrix, 1, function(x) {sum(abs(x))})
output_list <- list(coefficients = coefficient_matrix,
l1_arc_length = arg_length)
class(output_list) <- "LAR"
return (output_list)
}
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
theme_minimal()
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
#' Calculate the LARS path
#'
#' @param X data frame containing the covariates
#' @param Y response vector
#'
#' @return list ..... TODO
### TODO ####
# Verbose option
# plot(...) for plotting L1-arc length
# step output
# Lasso option
least_angle_regression <- function(X, y, iter = 10, verbose = FALSE) {
n <- nrow(X)
p <- ncol(X)
coefficient_matrix <- matrix(NA, iter, p)
# Standardize regressors and initialize the first residuum
X_scaled <- scale(X)
r <- y - mean(y)
# Helper
active_variables <- logical(p)
beta <- double(p)
for (i in 1:iter) {
# Find the regressor x most correlated with current r
r_cor <- cor(X_scaled[, !active_variables], r)
x_index <- which.max(abs(r_cor))
# update the active set
active_variables[x_index] <- TRUE
A <- X_scaled[, active_variables]
# Calculate the current model and update beta
delta_step <- solve(t(A) %*% A, t(A) %*% r) # .Internal(La_solve(t(A) %*% A, t(A) %*% r, .Machine$double.eps))
beta[active_variables] <- beta[active_variables] + delta_step
# update the residual
r <- y - A %*% as.matrix(beta[active_variables])
# Verbose option : TODO
if(verbose) {
active_set_verbose <- as.array(active_variables)
dimnames(active_set_verbose) <- colnames(X)[active_variables]
}
# update output data
coefficient_matrix[i, ] <- beta
}
# Calculate arc length
arg_length <- apply(coefficient_matrix, 1, function(x) {sum(x)})
output_list <- list(coefficients = coefficient_matrix,
l1_arc_length = arg_length)
class(output_list) <- "LAR"
return (output_list)
}
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
result
X
y
result$coefficients
X <- matrix(rnorm(n * p,mean =  -20), n, p)
colnames(X) <- paste0("V", 1:p)
y <- X[, 1:5] %*% 1:5 + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
result
y
Coefficient
coef_long
# Generate example data
set.seed(123)
n <- 100
p <- 6
X <- matrix(rnorm(n * p,mean =  20), n, p)
colnames(X) <- paste0("V", 1:p)
y <- X[, 1:5] %*% 1:5 + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
coef_long
X <- matrix(rnorm(n * p,mean =  -2), n, p)
colnames(X) <- paste0("V", 1:p)
y <- X[, 1:5] %*% 1:5 + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
X <- matrix(rnorm(n * p,mean =  20), n, p)
colnames(X) <- paste0("V", 1:p)
y <- X[, 1:5] %*% -(1:5) + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
y <- X[, 1:5] %*% - c(-2,5,1,-10,-5) + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
# Generate example data
set.seed(123)
n <- 100
p <- 6
X <- matrix(rnorm(n * p,mean =  20), n, p)
colnames(X) <- paste0("V", 1:p)
y <- X[, 1:5] %*% - c(-2,5,1,-10,-5) + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
results
result
#' Calculate the LARS path
#'
#' @param X data frame containing the covariates
#' @param Y response vector
#'
#' @return list ..... TODO
### TODO ####
# Verbose option
# plot(...) for plotting L1-arc length
# step output
# Lasso option
least_angle_regression <- function(X, y, iter = 10, verbose = FALSE) {
n <- nrow(X)
p <- ncol(X)
coefficient_matrix <- matrix(NA, iter, p)
# Standardize regressors and initialize the first residuum
X_scaled <- scale(X)
r <- y - mean(y)
# Helper
active_variables <- logical(p)
beta <- double(p)
for (i in 1:iter) {
# Find the regressor x most correlated with current r
r_cor <- cor(X_scaled[, !active_variables], r)
x_index <- which.max(abs(r_cor))
# update the active set
active_variables[x_index] <- TRUE
A <- X_scaled[, active_variables]
# Calculate the current model and update beta
delta_step <- solve(t(A) %*% A, t(A) %*% r) # .Internal(La_solve(t(A) %*% A, t(A) %*% r, .Machine$double.eps))
beta[active_variables] <- beta[active_variables] + delta_step
# update the residual
r <- y - A %*% as.matrix(beta[active_variables])
# Verbose option : TODO
if(verbose) {
active_set_verbose <- as.array(active_variables)
dimnames(active_set_verbose) <- colnames(X)[active_variables]
}
# update output data
coefficient_matrix[i, ] <- beta
}
# Calculate arc length
arg_length <- apply(coefficient_matrix, 1, function(x) {sum(abs(x))})
output_list <- list(coefficients = coefficient_matrix,
l1_arc_length = arg_length)
class(output_list) <- "LAR"
return (output_list)
}
# Generate example data
set.seed(123)
n <- 100
p <- 6
X <- matrix(rnorm(n * p,mean =  20), n, p)
colnames(X) <- paste0("V", 1:p)
y <- X[, 1:5] %*% - c(-2,5,1,-10,-5) + rnorm(n)  # Only first 5 predictors are relevant
# Fit LARS model
result <- least_angle_regression(X, y, iter = 50)
result$coefficients
result$l1_arc_length
# Load necessary library
library(ggplot2)
# Prepare data for plotting
coef_matrix <- result$coefficients
iterations <- result$l1_arc_length
coef_df <- as.data.frame(coef_matrix)
coef_df$iteration <- iterations
# Convert data to long format for ggplot2
coef_long <- reshape2::melt(coef_df, id.vars = "iteration", variable.name = "Feature", value.name = "Coefficient")
# Plot the coefficient paths
ggplot(coef_long, aes(x = iteration, y = Coefficient, color = Feature)) +
geom_line() +
labs(title = "LARS Coefficient Paths", x = "Iteration", y = "Coefficient Value") +
geom_abline(intercept = 0, slope = 0, linetype = "dashed")
theme_minimal()
devtools::document()
