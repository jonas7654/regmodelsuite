# Display the dimensions of the dataset
cat("Dimensions of the dataset: \n")
cat("Number of observations:", n, "\n")
cat("Number of predictors:", p, "\n")
cat("Dimensions of the data frame:", dim(df), "\n")
# Show the first few rows of the dataset
head(df)
X
dim(X)
rm(list = ls())
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 100  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector for a subset of predictors
beta_true <- rnorm(p)
# Introduce sparsity: zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
# Noise is added to simulate real-world data
y <- X %*% beta_true + rnorm(n)
# Convert to data frame for easier handling
df <- data.frame(X)
df$y <- y
df
names(df)
dim(df)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5)
df
# Parameters
n <- 200  # Number of observations
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Convert to data frame
df <- data.frame(X)
df$y <- y
dim(df)
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 200  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
dim(df)
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(training_set)
dim(test_set)
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 200  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5)
min_lambda <- lassoCV$min_lambda
devtools::load_all()
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5)
min_lambda <- lassoCV$min_lambda
print(ridgeCV)
print(lassoCV)
min_lambda
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 50)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10)
min_lambda <- lassoCV$min_lambda
print(lassoCV)
min_lambda <- lassoCV$min_lambda
print(lassoCV)
min_lambda
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
lasso_fit$R2
beta_true
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 800  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "ridge",
lambda = min_lambda)
print(lasso_fit)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "ridge",
lambda = 0)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "ridge",
lambda = 0.1)
print(lasso_fit$R2)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = 0.1)
# Parameters
n <- 400  # Number of observations
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 400  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = 0.1)
lasso_fit
View(lasso)
devtools::load
devtools::load_all()
View(lasso)
devtools::load_all()
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 400  # Number of observations
p <- 1000  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 50  # Number of observations
p <- 60  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
devtools::load_all()
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 5, m = 5)
min_lambda <- lassoCV$min_lambda
min_lambda
print(lassoCV)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
min_lambda <- lassoCV$min_lambda
min_lambda
print(lassoCV)
min_lambda
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
lasso_fit$coefficients
beta
beta_true
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
training_set
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 50  # Number of observations
p <- 60  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
min_lambda <- lassoCV$min_lambda
min_lambda
print(lassoCV)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
lasso_fit$R2
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
min(pred_outofsample)
max(pred_outofsample)
min(df$y)
max(df$y)
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 400  # Number of observations
p <- 600  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
library(regmodelsuite)
set.seed(123)  # For reproducibility
# Parameters
n <- 400  # Number of observations
p <- 300  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
df <- data.frame(X)
df$y <- y
# Split the dataset into a training and test set (50/50)
Indexes <- sample(1:(nrow(df) * 0.5))
training_set <- df[Indexes , ]
test_set <- df[-Indexes , ]
dim(df)
dim(training_set)
dim(test_set)
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
devtools::load_all()
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
?devtools::install_github
devtools::load_all()
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
min_lambda <- lassoCV$min_lambda
min_lambda
print(lassoCV)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
plot(lassoCV$lambda_grid, lassoCV$MSPE)
View(ridge)
devtools::load_all()
# seed for reproducebillity
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
min_lambda <- lassoCV$min_lambda
min_lambda
print(lassoCV)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
plot(lassoCV$lambda_grid, lassoCV$MSPE)
plot(log(lassoCV$lambda_grid), lassoCV$MSPE)
qplot(log(lassoCV$lambda_grid), lassoCV$MSPE)
library(ggplot2)
pred_insample <- predict(lasso_fit)
print(pred_insample)
cat("-----------------------------------------------------------")
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
pred_insample <- predict(lasso_fit)
print(pred_insample)
cat("----------------------------------------------------------- \n")
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
pred_insample <- predict(lasso_fit)
print(pred_insample)
cat("----------------------------------------------------------- \n \n")
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
# Calculate the Mean squared prediction error
mean((pred_outofsample - test_set)^2)
# Calculate the Mean squared prediction error
mean((pred_outofsample - test_set)^2)
pred_outofsample
# Calculate the Mean squared prediction error
mean((pred_outofsample - test_set$y)^2)
test_set$y
# Calculate the Mean squared prediction error
mean((pred_outofsample - test_set$y)^2)
lassoCV$MSPE
qplot(log(lassoCV$lambda_grid), lassoCV$MSPE)
?regmodel
lines(log(lassoCV$lambda_grid), lassoCV$MSPE)
plot(log(lassoCV$lambda_grid), lassoCV$MSPE)
# scaled coefficients
coef(lasso_fit)
# unscaled coefficients
coef(lasso_fit, unscale = TRUE)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = min_lambda)
print(lasso_fit)
# scaled coefficients
coef(lasso_fit)
# unscaled coefficients
coef(lasso_fit, unscale = TRUE)
devtools::install("jonas7654/regmodelsuite" )
devtools::install_github("jonas7654/regmodelsuite" )
devtools::install_github("jonas7654/regmodelsuite", ref = "final")
