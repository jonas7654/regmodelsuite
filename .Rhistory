lasso_cv(matX, maty, m = 2)
force(y)
force(tol)
devtools::load_all()
lasso_cv(matX, maty, m = 2)
devtools::load_all()
lasso_cv(matX, maty, m = 2)
devtools::load_all()
lasso_cv(matX, maty, m = 2)
devtools::load_all()
lasso_cv(matX, maty, m = 2)
cross_validation(matX, maty, m = 2)
lasso_cv(matX, maty, m = 2)
devtools::load_all()
cross_validation(matX, maty, m = 2)
devtools::load_all()
cross_validation(matX, maty, m = 2)
devtools::load_all()
cross_validation(matX, maty, m = 2)
devtools::load_all()
cross_validation(matX, maty, m = 2)
x <- matrix(c(1,2,3,4), nrow = 4)
x
1:nrow(x)
sample(1:nrow(x))
devtools::load_all()
cross_validation(matX, maty, m = 2)
matX
devtools::load_all()
cross_validation(matX, maty, m = 2)
devtools::load_all()
cross_validation(matX, maty, m = 2)
# Convert to matrix
X <- as.matrix(dtm)
library(haven)
library(rstudioapi)
library(tidyverse)
library(glmnet)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
school_data <- read_dta("ca_school_testscore.dta") %>%
dplyr::select('math_score',
'str_s' ,
'te_avgyr_s' ,
'exp_1000_1999_d' ,
'med_income_z' ,
'frpm_frac_s' ,
'ell_frac_s' ,
'freem_frac_s',
'enrollment_s' ,
'fep_frac_s' ,
'edi_s' ,
're_aian_frac_s',
're_asian_frac_s',
're_baa_frac_s' ,
're_fil_frac_s' ,
're_hl_frac_s' ,
're_hpi_frac_s' ,
're_tom_frac_s' ,
're_nr_frac_s' ,
'te_fte_s' ,
'te_1yr_frac_s' ,
'te_2yr_frac_s' ,
'te_tot_fte_rat_s' ,
'exp_2000_2999_d' ,
'exp_3000_3999_d' ,
'exp_4000_4999_d' ,
'exp_5000_5999_d' ,
'exp_6000_6999_d' ,
'exp_7000_7999_d' ,
'exp_8000_8999_d' ,
'expoc_1000_1999_d',
'expoc_2000_2999_d' ,
'expoc_3000_3999_d' ,
'expoc_4000_4999_d' ,
'expoc_5000_5999_d' ,
'revoc_8010_8099_d' ,
'revoc_8100_8299_d' ,
'revoc_8300_8599_d' ,
'revoc_8600_8799_d' ,
'age_frac_5_17_z' ,
'age_frac_18_24_z' ,
'age_frac_25_34_z' ,
'age_frac_35_44_z' ,
'age_frac_45_54_z' ,
'age_frac_55_64_z' ,
'age_frac_65_74_z' ,
'age_frac_75_older_z' ,
'pop_1_older_z' ,
'sex_frac_male_z',
'ms_frac_now_married_z' ,
'ms_frac_now_divorced_z' ,
'ms_frac_now_widowed_z' ,
'ed_frac_hs_z' ,
'ed_frac_sc_z' ,
'ed_frac_ba_z' ,
'ed_frac_grd_z' ,
'hs_frac_own_z' ,
'moved_frac_samecounty_z',
'moved_frac_difcounty_z',
'moved_frac_difstate_z' ,
'moved_frac_abroad_z'
)
head(school_data)
#prepare data (Split data into training and test set 50/50)
n = nrow(school_data)
train_rows = sample(n, 0.5 * n)
train_data = school_data[train_rows,]
test_data = school_data[-train_rows,]
# Large model with all variables, squared variables and cubic variables as well as all interactions
reg_equation <- formula(math_score ~ .)
dim(model.matrix(reg_equation, train_data))
##########################################################################
if(!requireNamespace("tm", quietly = TRUE)) {
install.packages("tm")
}
library(tm)
# Example text corpus (small for demonstration)
texts <- c("Text mining is fun", "R is great for text analysis", "High-dimensional data can be challenging")
corpus <- Corpus(VectorSource(texts))
# Convert to lowercase
corpus <- tm_map(corpus, content_transformer(tolower))
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Remove stopwords (like 'the', 'and', etc.)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Convert to Document-Term Matrix (DTM)
dtm <- DocumentTermMatrix(corpus, control = list(weighting = weightTfIdf))
library(haven)
library(rstudioapi)
library(tidyverse)
library(glmnet)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
school_data <- read_dta("ca_school_testscore.dta") %>%
dplyr::select('math_score',
'str_s' ,
'te_avgyr_s' ,
'exp_1000_1999_d' ,
'med_income_z' ,
'frpm_frac_s' ,
'ell_frac_s' ,
'freem_frac_s',
'enrollment_s' ,
'fep_frac_s' ,
'edi_s' ,
're_aian_frac_s',
're_asian_frac_s',
're_baa_frac_s' ,
're_fil_frac_s' ,
're_hl_frac_s' ,
're_hpi_frac_s' ,
're_tom_frac_s' ,
're_nr_frac_s' ,
'te_fte_s' ,
'te_1yr_frac_s' ,
'te_2yr_frac_s' ,
'te_tot_fte_rat_s' ,
'exp_2000_2999_d' ,
'exp_3000_3999_d' ,
'exp_4000_4999_d' ,
'exp_5000_5999_d' ,
'exp_6000_6999_d' ,
'exp_7000_7999_d' ,
'exp_8000_8999_d' ,
'expoc_1000_1999_d',
'expoc_2000_2999_d' ,
'expoc_3000_3999_d' ,
'expoc_4000_4999_d' ,
'expoc_5000_5999_d' ,
'revoc_8010_8099_d' ,
'revoc_8100_8299_d' ,
'revoc_8300_8599_d' ,
'revoc_8600_8799_d' ,
'age_frac_5_17_z' ,
'age_frac_18_24_z' ,
'age_frac_25_34_z' ,
'age_frac_35_44_z' ,
'age_frac_45_54_z' ,
'age_frac_55_64_z' ,
'age_frac_65_74_z' ,
'age_frac_75_older_z' ,
'pop_1_older_z' ,
'sex_frac_male_z',
'ms_frac_now_married_z' ,
'ms_frac_now_divorced_z' ,
'ms_frac_now_widowed_z' ,
'ed_frac_hs_z' ,
'ed_frac_sc_z' ,
'ed_frac_ba_z' ,
'ed_frac_grd_z' ,
'hs_frac_own_z' ,
'moved_frac_samecounty_z',
'moved_frac_difcounty_z',
'moved_frac_difstate_z' ,
'moved_frac_abroad_z'
)
head(school_data)
#prepare data (Split data into training and test set 50/50)
n = nrow(school_data)
train_rows = sample(n, 0.5 * n)
train_data = school_data[train_rows,]
test_data = school_data[-train_rows,]
# Large model with all variables, squared variables and cubic variables as well as all interactions
reg_equation <- formula(math_score ~ .)
dim(model.matrix(reg_equation, train_data))
##########################################################################
if(!requireNamespace("tm", quietly = TRUE)) {
install.packages("tm")
}
library(tm)
# Example text corpus (small for demonstration)
texts <- c("Text mining is fun", "R is great for text analysis", "High-dimensional data can be challenging")
corpus <- Corpus(VectorSource(texts))
# Convert to lowercase
corpus <- tm_map(corpus, content_transformer(tolower))
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Remove stopwords (like 'the', 'and', etc.)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Convert to Document-Term Matrix (DTM)
dtm <- DocumentTermMatrix(corpus, control = list(weighting = weightTfIdf))
# Convert to matrix
X <- as.matrix(dtm)
# Simulate a response variable
y <- rnorm(nrow(X))
# Convert to data frame
dataframe <- as.data.frame(cbind(y, X))
# Create a formula for the model
model_formula <- formula(paste("y ~", paste(colnames(X), collapse = " + ")))
cross_validation(X, y)
cross_validation(X, y, m = 3)
devtools::load_all()
cross_validation(X, y, m = 3)
set.seed(21)
n <- 100
d <- 10
o <- 0.3
X <- matrix(runif(n * d), n, d) #unabhÃĪngig+gleichverteilt auf [0,1]
real_ridge <- runif(d, min = -1, max = 1) #die echten Werte fÃžr Beta
y <- X %*% real_ridge + rnorm(n, mean = 0, sd = o) #Y mit normalverteiltem Messfehler N(0,o^2)
cross_validation(X, y)
lasso_cv(X, y)
devtools::load_all()
lasso_cv(X, y)
cross_validation(X, y)
devtools::load_all()
lasso_cv(X, y)
devtools::load_all()
cross_validation(X, y)
devtools::load_all()
cross_validation(X, y)
devtools::load_all()
cross_validation(X, y)
devtools::load_all()
cross_validation(X, y)
lasso_cv(X, y)
devtools::load_all()
lasso_cv(X, y)
cross_validation(X, y)
lasso_cv(X, y)
devtools::load_all()
cross_validation(X, y)
X
cross_validation(X, y,m=100)
devtools::load_all()
least_angle_regression(X,y)
devtools::load_all()
lasso_cv(X, y, m = 100)
devtools::load_all()
lasso_cv(X, y, m = 100)
devtools::load_all()
stopifnot("Cannot use cross validation with a single lambda.
Cross validation requires multiple lambdas.
Provide either a vector with length >= 2 or
no lambda, to use the default lambdas" = FALSE)
is.vector(1)
?regmodel
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?regmodel
devtools::load_all()
X
dataXY <- tibble::tibble(X, y)
dataXY
colnames(dataXY)
dataXY <- tibble::tibble(X)
dataXY
dataXY <- as.tibble(X)
dataXY
dataXY <- cbind(X,y)
dataXY
dataXY <- as.tibble(X)
dataXY
?cbind
y
datay <- as.tibble(y)
dataXY <- cbind(X,y)
dataXY
colnames(dataXY)
dataXY <- as.tibble(dataXY)
dataXY
colnames(dataXY)
colnames(dataXY) <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
dataXY
?regmodel
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", lambda = 2)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", lambda = 2)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", lambda = 2)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", lambda = 2)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", lambda = 2, cv = T)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
nrow(X)
nrow(X)%%10
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
m= 10
m
as.integer(m)
m <- as.integer(m)
m
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T, m = 10)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T, m = 10)
force(lambda)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T, m = 10)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T, m = 10)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
force(lambda)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "lasso", cv = T)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "LAR", cv = T)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T, lambda = 1)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
devtools::load_all()
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "ridge", cv = T, m = 5)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "lasso", cv = T, m = 5)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "las", cv = T, m = 5)
regmodel(formula = y ~ x1 + x2 + x3, data = dataXY, model = "lasso", cv = T, m = 5)
document()
devtools::document()
?ridge
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?ridge
devtools::document()
?ridge
devtools::document()
?ridge
devtools::document()
?ridge_cv
devtools::document()
?ridge_cv
devtools::test()
X
devtools::load_all()
test_that("regmodel input checks work", {
n <- 100
p <- 5
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(X) <- paste0("X", 1:p)
x1 <- X[ , 1]
y <- rnorm(n)
data <- data.frame(y, X1 = X[, 1], X2 = X[, 2], X3 = X[, 3], X4 = X[, 4], X5 = X[, 5])
formula <- y ~ X1 + X2 + X3 + X4 + X5
lambda <- 1
# Test for ridge regression with a negative lambda
expect_error(regmodel(formula = formula, data = data, model = "ridge", lambda = -1))
# Test for ridge regression with negative lambda grid
expect_error(regmodel(formula = formula, data = data, model = "ridge", lambda = c(-1,-2,-5,2)))
# Test for ridge regression with a negative lambda
expect_error(regmodel(formula = formula, data = data, model = "lasso", lambda = -1))
# Test for ridge regression with negative lambda grid
expect_error(regmodel(formula = formula, data = data, model = "lasso", lambda = c(-1,-2,-5,2)))
# Test for wrong lambda
expect_error(regmodel(formula = formula, data = data, model = "lasso", lambda = "1"))
# Wrong model input
expect_error(regmodel(formula = formula, data = data, model = lasso, lambda = c(-1,2)))
expect_error(regmodel(formula = formula, data = data, model = "Lasso", lambda = 2))
# Formula input test
expect_error(regmodel(formula = "y ~ x", data = data, model = "lasso", lambda = 1))
expect_error(regmodel(formula = as.formula(y ~ k) , data = data, model = "lasso", lambda = 1))
# Find variables in environment
###
# Das hier funktioniert nicht, da die x1 nicht gefunden wird in dieser testumgebung
# expect_no_error(regmodel(formula = y ~ x1 , model = "lasso", lambda = 1))
###
expect_error(regmodel(formula = y ~ . , model = "lasso", lambda = 1))
# cv parameter test
expect_error(regmodel(formula , data = data , model = "ridge", lambda = c(1, -2), cv = T))
expect_error(regmodel(formula , data = data , model = "ridge", lambda = c(1, -2), cv = c(T,F)))
expect_error(regmodel(formula , data = data , model = "ridge", lambda = c(1, -2), cv = 20))
expect_error(regmodel(formula , data = data , model = "ridge", lambda = c(1, -2), cv = "TRUE"))
expect_warning(regmodel(formula , data = data , model = "lasso", cv = T, lambda = 1))
expect_no_warning(regmodel(formula , data = data , model = "lasso", cv = T, lambda = c(1,2,3)))
# Lambda should be ignored
expect_no_error(regmodel(formula , data = data ,model = "backward", lambda = c(1, -2), cv = T))
expect_no_error(regmodel(formula , data = data ,model = "forward", lambda = c(1, -2), cv = T))
expect_no_error(regmodel(formula , data = data ,model = "LAR", lambda = c(1, -2), cv = T))
})
devtools::test()
devtools::document()
?regmodel
devtools::document()
?regmodel
devtools::document()
?regmodel
devtools::document()
?regmodel
?regmodelsuite
devtools::load_all()
devtools::document()
?regmodel
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?regmodel
devtools::load_all()
devtools::document()
?regmodel
devtools::load_all()
devtools::document()
?regmodel
devtools::load_all()
devtools::document()
?regmodel
devtools::load_all()
devtools::document()
?regmodel
browseVignettes()
devtools::use_r("ta")
vignette("reuse", package = "roxygen2")
usethis::use_vignette("Ridge CV")
usethis::use_vignette("Ridge_CV")
devtools::document()
vignette("Ridge_CV")
vignette("Ridge_CV", package = "regmodelsuite")
vignette(topic = "Ridge_CV", package = "regmodelsuite")
vignette(package = "regmodelsuite")
devtools::load_all()
devtools::document()
vignette("Ridge_CV", package = "regmodelsuite")
devtools::load_all()
devtools::document()
vignette("Ridge_CV", package = "regmodelsuite")
vignette(topic = "Ridge_CV", package = "regmodelsuite")
install.packages("~/00_Nika/MASTER/MASTER/Programmiersprache R/regmodelsuite_0.0.0.9000.tar.gz", repos = NULL, type = "source")
vignette(topic = "Ridge_CV", package = "regmodelsuite")
devtools::build()
vignette(topic = "Ridge_CV", package = "regmodelsuite")
vignette(topic = "CV", package = "regmodelsuite")
vignette(topic = "Cross Validation", package = "regmodelsuite")
vignette(package = "regmodelsuite")
devtools::load_all()
devtools::document()
devtools::build()
vignette(package = "regmodelsuite")
devtools::install()
vignette(package = "regmodelsuite")
vignette(topic = "Cross Validation", package = "regmodelsuite")
vignette(topic = "Ridge_CV", package = "regmodelsuite")
devtools::install()
vignette(package = "regmodelsuite")
devtools::build_rmd("vignettes/Ridge_CV.Rmd")
vignette(package = "regmodelsuite")
browseVignettes(package = "regmodelsuite")
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
dir.create("inst/doc")
devtools::install(build_vignettes = TRUE)
devtools::install()
devtools::install(build_vignettes = TRUE)
browseVignettes(package = "regmodelsuite")
usethis::use_vignette(name = "cv", title = "Cross Validation")
?regmodel
devtools::install(build_vignettes = TRUE)
.Last.error
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install(build_vignettes = TRUE)
browseVignettes(package = "regmodelsuite")
devtools::install(build_vignettes = TRUE)
devtools::uninstall()
devtools::install(build_vignettes = TRUE)
