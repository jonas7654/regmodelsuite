# Convert to data frame
full_data <- data.frame(X)
full_data$y <- y
# Split the dataset into a training and test set (50/50)
training_indices <- sample(1:nrow(full_data), size = 0.5 * floor(nrow(full_data)))
training_set <- full_data[training_indices , ]
test_set <- full_data[-training_indices , ]
cat("Full data dimensions: ", dim(full_data), "\n")
cat("Training set dimensions: ", dim(training_set), "\n")
cat("Test set dimensions: ", dim(test_set), "\n")
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
print(lassoCV)
lambda_grid <- runif(10 , min = 0,  max = lassoCV$min_lambda + 2)
print(lambda_grid)
lassoCVmanual <- regmodel(model_formula , data = training_set, model = "lasso",
cv = T, lambda = lambda_grid, m = 5)
print(lassoCVmanual)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = lassoCVmanual$min_lambda)
# scaled coefficients
coef(lasso_fit)
# unscaled coefficients
coef(lasso_fit, unscale = TRUE)
lasso_fit <- regmodel(model_formula,
data = training_set,
model = "lasso",
lambda = lassoCVmanual$min_lambda)
# scaled coefficients
coef(lasso_fit)
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
# Calculate the Mean squared prediction error
mean((pred_outofsample - test_set$y)^2)
# Plot y and predicted y
{
plot(test_set$y);
points(pred_outofsample, col = "red" , pch = 2)
}
pred_insample <- predict(lasso_fit)
print(pred_insample)
# Now use the test set
pred_outofsample <- predict(lasso_fit, newdata = test_set)
print(pred_outofsample)
# Calculate the Mean squared prediction error
mean((pred_outofsample - test_set$y)^2)
# Plot y and predicted y
{
plot(test_set$y);
points(pred_outofsample, col = "red" , pch = 2)
}
{
plot(log(lassoCV$lambda_grid), lassoCV$MSPE,
xlab = "Log(Lambda)", ylab = "Mean Squared Prediction Error",
main = "MSPE vs. Log(Lambda)")
}
library(regmodelsuite)
set.seed(1223)  # For reproducibility
n <- 50    # Number of observations
p <- 200   # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(9823)  # For reproducibility
n <- 50    # Number of observations
p <- 200   # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(1523)  # For reproducibility
n <- 300    # Number of observations
p <- 400   # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(1523)  # For reproducibility
n <- 2000    # Number of observations
p <- 400   # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(1523)  # For reproducibility
n <- 1000    # Number of observations
p <- 1500  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(1523)  # For reproducibility
n <- 100    # Number of observations
p <- 200  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(52)  # For reproducibility
n <- 100    # Number of observations
p <- 200  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(14545)  # For reproducibility
n <- 100    # Number of observations
p <- 200  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
library(regmodelsuite)
set.seed(14545)  # For reproducibility
n <- 100    # Number of observations
p <- 200  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
library(regmodelsuite)
set.seed(1337)  # For reproducibility
n <- 100    # Number of observations
p <- 200  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
dim(df)
set.seed(23025)
model_formula <- y ~ .
fit_LAR <- regmodel(model_formula, data = df, model = "LAR")
cat("Scaled: ", coef(fit_LAR), "\n")
cat("Unscaled: ", coef(fit_LAR, unscale = TRUE))
set.seed(555)
# Parameters
n <- 50  # Number of observations
p <- 200  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- as.data.frame(matrix(rnorm(n * p), nrow = n, ncol = p))
# Predicting
pred <- predict(fit_LAR, newdata = X)
set.seed(555)
# Parameters
n <- 100  # Number of observations
p <- 200  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- as.data.frame(matrix(rnorm(n * p), nrow = n, ncol = p))
# Predicting
pred <- predict(fit_LAR, newdata = X)
pred
{plot(df$y); points(pred, col = "red",pch = 2)}
fit_LAR$R2
# Calculating Mean Squared Prediction Error
mean((pred - df$y)^2)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
# Generate predictor matrix (X) with normal distributed values
X <- as.data.frame(matrix(rnorm(n * p), nrow = n, ncol = p))
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y <- X %*% beta + rnorm(n)
# Predicting
pred <- predict(fit_LAR, newdata = X)
# Convert to data.frame
X <- as.data.frame(X)
# Predicting
pred <- predict(fit_LAR, newdata = X)
pred
# Calculating Mean Squared Prediction Error
mean((pred - df$y)^2)
{plot(df$y); points(pred, col = "red",pch = 2)}
y_new <- X %*% beta + rnorm(n)
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
# Convert to data.frame
X <- as.data.frame(X)
# Predicting
pred <- predict(fit_LAR, newdata = X)
pred
# Calculating Mean Squared Prediction Error
mean((pred - y_new)^2)
{plot(df$y); points(pred, col = "red",pch = 2)}
plot(fit_LAR)
# Parameters
n <- 25  # Number of observations
p <- 30  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
# Parameters
n <- 25  # Number of observations
p <- 30  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
fit_LAR_small <- regmodel(y ~ . , data = df, model = "LAR")
df
plot(fit_LAR_small)
coef(fit_LAR_small)
set.seed(1422)
# Parameters
n <- 25  # Number of observations
p <- 30  # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
fit_LAR_small <- regmodel(y ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1422)
# Parameters
n <- 150  # Number of observations
p <- 10 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
set.seed(1422)
# Parameters
n <- 150  # Number of observations
p <- 10 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y,X)
beta
X
dim(XC)
dim(X)
p
beta
length(beta)
set.seed(1422)
# Parameters
n <- 150  # Number of observations
p <- 10 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y ~ . , data = df, model = "LAR")
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
fit_LAR_small <- regmodel(y ~ . , data = df, model = "LAR")
set.seed(1422)
# Parameters
n <- 150  # Number of observations
p <- 10 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1422)
# Parameters
n <- 1500  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1422)
# Parameters
n <- 15000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1422)
# Parameters
n <- 15000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 3), rep(-2, 2), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1422)
# Parameters
n <- 15000  # Number of observations
p <- 20 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 3), rep(-2, 2), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(342)
# Parameters
n <- 15000  # Number of observations
p <- 20 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(2, 3), rep(-2, 2), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(342)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(c(2,-2), 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
beta
set.seed(342)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(rep(c(2), 5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
set.seed(342)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(runif(5), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(342)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(runif(5,-10,10), rep(0, p-5))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
set.seed(342)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(runif(10,-10,10), rep(0, p-10))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
beta
set.seed(4212)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(runif(10,-10,10), rep(0, p-10))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1378)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- c(runif(10,-10,10), rep(0, p-10))  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
set.seed(1378)
# Parameters
n <- 2000  # Number of observations
p <- 15 # Number of predictors
X <- matrix(rnorm(n*p), nrow=n, ncol=p)
beta <- rnorm(p)  # Only the first 5 predictors are relevant
y_new <- X %*% beta + rnorm(n)
df <- data.frame(y_new,X)
fit_LAR_small <- regmodel(y_new ~ . , data = df, model = "LAR")
coef(fit_LAR_small)
plot(fit_LAR_small)
?rmarkdown::render
rmarkdown::render("vignettes/Least_angle_regression.Rmd")
browseVignettes()
browseVignettes(package = "regmodelsuite")
library(regmodelsuite)
browseVignettes(package = "regmodelsuite")
devtools::install()
browseVignettes(package = "regmodelsuite")
devtools::install("regmodelsuite" ,build_vignettes = T)
devtools::install(package = "regmodelsuite" ,build_vignettes = T)
devtools::install(package = "regmodelsuite" ,build_vignettes = F
)
devtools::install()
library(regmodelsuite)
set.seed(1443)  # For reproducibility
# Parameters
n <- 50  # Number of observations
p <- 100  # Number of predictors
# Generate predictor matrix (X) with normal distributed values
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
# Create a true coefficient vector
beta_true <- rnorm(p)
# zero out some coefficients
beta_true[abs(beta_true) < 0.5] <- 0
# Generate response variable (y) as a linear combination of predictors + noise
y <- X %*% beta_true + rnorm(n)
# Convert to data frame
full_data <- data.frame(X)
full_data$y <- y
# Split the dataset into a training and test set (50/50)
training_indices <- sample(1:nrow(full_data), size = 0.5 * floor(nrow(full_data)))
training_set <- full_data[training_indices , ]
test_set <- full_data[-training_indices , ]
cat("Full data dimensions: ", dim(full_data), "\n")
cat("Training set dimensions: ", dim(training_set), "\n")
cat("Test set dimensions: ", dim(test_set), "\n")
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
set.seed(2302)
model_formula <- y ~ .
lassoCV <- regmodel(model_formula, data = training_set, model = "lasso", cv = T,
nlambda = 10, m = 5)
devtools::load_all()
